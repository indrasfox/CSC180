/*
 * CSC180 Week05 Programming Assignment
 * Exercise 5.2. page 56-57
 */

using System;

namespace CSC180Week05
{
    class Program
    {
        public static double Yikes(double x)
        {
            double a, b, c;
            a = x;
            b = Math.Exp(-x);
            c = Math.Sqrt((1 - Math.Exp(-x)));
            return Multadd(a, b, c);
        }
        public static double Multadd(double a, double b, double c)
        {
            return a * b + c;
        }
        static void Main(string[] args)
        {
            // test Multadd using a=1, b=2, c=3;
            Console.WriteLine("Multadd(1.0, 2.0, 3.0) = {0:0.00}", Multadd(1.0, 2.0, 3.0));
            // test trigonometric formula
            double a, b, c;
            a = 1.0 / 2.0;
            b = Math.Cos(Math.PI / 4.0);
            c = Math.Sin(Math.PI / 4.0);
            Console.WriteLine("Trigonometric formula result: {0:0.00}", Multadd(a, b, c));
            // test logarithmic formula
            a = 1.0;
            b = Math.Log(10);
            c = Math.Log(20);
            Console.WriteLine("Logarithmic formula result: {0:0.00}", Multadd(a, b, c));
            // test Yikes method
            Console.WriteLine("Result using Yikes method with x=1.0: {0:0.00}", Yikes(1.0));
        }
    }
}



/*
 * CSC180 Week05 Programming Assignment
 * Exercise 5.5. The point of this exercise is to use a stack diagram to understand the
 * execution of a recursive program. (page 58)
 */

using System;
public class ProdTest // change it to a different name from Prod method
{
    public static void Main(string[] args)
    {
        Console.WriteLine(Prod(1, 4));
    }
    public static int Prod(int m, int n)
    {
        if (m == n)
        {
            return n;
        }
        else
        {
            //int recurse = Prod(m, n - 1);
            //int result = n * recurse;
            //return result;
            // the above three lines can be condensed into one as following:
            return n * Prod(m, n - 1);
        }
    }
}

/*
 * The method Prod computes the product of m*(m-1)* ... (n-1)*n
 * Stack diagram
 * m=1, n=4, Prod (1,4) ↓                    ↑ 4 * Prod(1,3)  
 * m=1, n=3, Prod (1,3) ↓                    ↑ 3 * Prod(1,2)
 * m=1, n=2, Prod (1,2) ↓                    ↑ 2 * Prod(1,1)
 * m=1, n=1, Prod (1,1) ↓ → → stack bottom → → (returns)
 */
 
 
 
