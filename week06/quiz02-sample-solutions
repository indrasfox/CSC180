/*
 * CSC180 Week6 Quiz
 * 1. Run the program step-by-step using F11 key (step into) and explain the code.
 * This is an example of nested recursion (recursion inside recursion)
 */
using System;
class Program
{
    // recursive method printRow prints n characters of # on one line
    static void printRow(int n)
    {
        if (n < 1)
            return;
        Console.Write("#");
        printRow(n - 1);
    }

    // recursive method printPattern prints n rows of string pattern generated by recursive method printRow
    static void printPattern(int n)
    {
        if (n < 1)
            return;
        printRow(n);
        Console.WriteLine();
        printPattern(n - 1);
    }
    public static void Main()
    {
        printPattern(5);
    }
}



/*
 * CSC180 Week6 Quiz
 * 2. Complete the method that finds the median of three numbers.
 */
using System;
class Program
{
    static void Main(string[] args)
    {
        Console.WriteLine(MedianNumber(2, 1, 3));
        Console.WriteLine(MedianNumber(2, 1, 2));
        Console.WriteLine(MedianNumber(2, 2, 1));
        Console.WriteLine(MedianNumber(1, 2, 2));
    }
    static int MedianNumber(int a, int b, int c)
    {
        if ((a > b && b > c) || (c > b && b > a))
            return b;
        else if ((b > a && a > c) || (c > a && a > b))
            return a;
        else
        {  // handle scenarios when any two or all three numbers are equal
            if ((a == b) || (a == c))
                return a;
            else
                return c;
        }
    }
}



/*
 * CSC180 Week6 Quiz
 * 3. Complete Distance method that computes the distance between two points (x1,y1,z1) and (x2, y2, z2) in space.
   https://www.calculatorsoup.com/calculators/geometry-solids/distance-two-points.php
 */
using System;
class Program
{
    public static void Main()
    {
        Console.WriteLine(Distance(0, 0, 0, 1.0, 2.0, 3.0));
    }
    public static double Distance(double x1, double y1, double z1, double x2, double y2, double z2)
    {
        return Math.Sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1) + (z2 - z1) * (z2 - z1));
    }
}
